
AngularJS-based SPA is a tuple (T,C,D,E).
T - HTML Template
C - Controller
D - Data bindings
E - Event handler bindings
-----------------------------------
Controller Definition: 
C - Tuple of V,F, $scope

V - top level variables
F - top level functions
$scope ∈ V 
V($scope) - scope's variable properties
F($scope) - scope's function properties
W = V\ {$scope} - top level variables other that $scope

init ∈ F - initialisation function

-----------------------------------
Data Binding Relations:
between HTML tags and variable properites of $scope
D ⊆ {(h,V($scope) ∪ F($scope)} // D is a subset of h (html tag) and data (a combination of top level functions and variables)

define d = (n,o) ∈ D 
then source(d) = n, target(d) = o // source of the binding is n and target of binding is o 
two way data binding: target(d) ∈ V($scope) // target is an html tag. 

-----------------------------------
Function Modifications:

for each f ∈ F ∪ F($scope) // for each function
R(f) ⊆ V ∪ V($scope) // set of variables f reads from 
W(f) ⊆ V ∪ V($scope) // set of variables f writes to 
Inv(f) ⊂ F // functions invoken by f, proper subset of all functions

//NOTE @Anton check undestanding for 2 way data binding, doesn't also source(d) ∈ V($scope) hold?
//@Anton answer: source(d) ∈ V($scope) is given, source of data binding is always a variable, can't be anything else

//NOTE @Anton there is a bit confusing in notations? : V ⊆ V($scope) but they are often used as V ∪ V($scope)?
-----------------------------------
Term simplifications/ Vue mapping:
V($scope) - bindings to props, data
V - top level variables (bindings and other)

F($scope) - event handler functions
F - top level functions (event handlers and other)

h - html tags